<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EFHooks</name>
    </assembly>
    <members>
        <member name="T:EFHooks.PostUpdateHook`1">
            <summary>
            Implements a hook that will run after an entity gets updated in the database.
            </summary>
        </member>
        <member name="T:EFHooks.PostActionHook`1">
            <summary>
            Implements a strongly-typed hook to be run after an action is performed in the database.
            </summary>
            <typeparam name="TEntity">The type of entity this hook must watch for.</typeparam>
        </member>
        <member name="M:EFHooks.PostActionHook`1.HookObject(System.Object,EFHooks.HookEntityMetadata)">
            <summary>
            Implements the interface.  This causes the hook to only run for objects that are assignable to TEntity.
            </summary>
        </member>
        <member name="M:EFHooks.PostActionHook`1.Hook(`0,EFHooks.HookEntityMetadata)">
            <summary>
            The logic to perform per entity after the registered action gets performed.
            This gets run once per entity that has been changed.
            </summary>
        </member>
        <member name="P:EFHooks.PostActionHook`1.HookStates">
            <summary>
            Entity States that this hook must be registered to listen for.
            </summary>
        </member>
        <member name="T:EFHooks.PreInsertHook`1">
            <summary>
            Implements a hook that will run before an entity gets inserted into the database.
            </summary>
        </member>
        <member name="T:EFHooks.PreActionHook`1">
            <summary>
            A strongly typed PreActionHook.
            </summary>
            <typeparam name="TEntity">The type of entity this hook must watch for.</typeparam>
        </member>
        <member name="M:EFHooks.PreActionHook`1.Hook(`0,EFHooks.HookEntityMetadata)">
            <summary>
            The logic to perform per entity before the registered action gets performed.
            This gets run once per entity that has been changed.
            </summary>
            <param name="entity">The entity that is processed by Entity Framework.</param>
            <param name="metadata">Metadata about the entity in the context of this hook - such as state.</param>
        </member>
        <member name="M:EFHooks.PreActionHook`1.HookObject(System.Object,EFHooks.HookEntityMetadata)">
            <summary>
            Implements the interface.  This causes the hook to only run for objects that are assignable to TEntity.
            </summary>
        </member>
        <member name="P:EFHooks.PreActionHook`1.HookStates">
            <summary>
            Entity States that this hook must be registered to listen for.
            </summary>
        </member>
        <member name="T:EFHooks.PostInsertHook`1">
            <summary>
            Implements a hook that will run after an entity gets inserted into the database.
            </summary>
        </member>
        <member name="T:EFHooks.PreDeleteHook`1">
            <summary>
            Implements a hook that will run before an entity gets deleted from the database.
            </summary>
        </member>
        <member name="T:EFHooks.HookedDbContext">
            <summary>
            An Entity Framework DbContext that can be hooked into by registering EFHooks.IHook objects.
            </summary>
        </member>
        <member name="M:EFHooks.HookedDbContext.RegisterHook(EFHooks.IPreActionHook)">
            <summary>
            Registers a hook to run before a database action occurs.
            </summary>
            <param name="hook">The hook to register.</param>
        </member>
        <member name="M:EFHooks.HookedDbContext.RegisterHook(EFHooks.IPostActionHook)">
            <summary>
            Registers a hook to run after a database action occurs.
            </summary>
            <param name="hook">The hook to register.</param>
        </member>
        <member name="T:EFHooks.PostDeleteHook`1">
            <summary>
            Implements a hook that will run after an entity gets deleted from the database.
            </summary>
        </member>
        <member name="T:EFHooks.PreUpdateHook`1">
            <summary>
            Implements a hook that will run before an entity gets updated in the database.
            </summary>
        </member>
    </members>
</doc>
